# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FireClass
                                 A QGIS plugin
 FireDescription
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-01-14
        git sha              : $Format:%H$
        copyright            : (C) 2023 by fdo bad vel
        email                : fernandobadilla@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsMessageLog, Qgis, QgsProject, QgsApplication
from qgis.gui import QgsMessageBar


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .FireModule_dialog import FireClassDialog
import os.path
# interactively
#from resources import *
#from FireModule_dialog import FireClassDialog

# Use pdb for debugging
#import pdb
# also import pyqtRemoveInputHook
#from qgis.PyQt.QtCore import pyqtRemoveInputHook
# These lines allow you to set a breakpoint in the app
#pyqtRemoveInputHook()
#pdb.set_trace()

#from .C2FSB.Cell2FireQgisTask import Cell2FireTask
from argparse import Namespace
MESSAGE_CATEGORY = 'cell2fire'

class FireClass:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'FireClass_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&FireName')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        #
        # store cell2fire params
        self.params = {}
    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('FireClass', message)
    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag = True,
        add_to_menu = True,
        add_to_toolbar = True,
        status_tip = None,
        whats_this = None,
        parent = None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)
        return action
    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        icon_path = ':/plugins/FireModule/icon.png'
        self.add_action(
            icon_path,
            text = self.tr(u'FireMenuItemText'),
            callback = self.run,
            parent = self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&FireName'),
                action)
            self.iface.removeToolBarIcon(action)

    def tab_callback(self):
        ci = self.dlg.tabWidget.currentIndex()
        QgsMessageLog.logMessage('tab_callback\t%s'%(ci), "fire2gui", level = Qgis.Info)
        self.dlg.bar.pushMessage("tab event", "tab changed to %s"%ci, level = Qgis.Info)
        if ci == 8:
            self.getParams()

    def file_callback(self):
        #pyqtRemoveInputHook()
        #pdb.set_trace()
        sender = self.dlg.sender()
        senderName = sender.objectName()
        filePath = sender.filePath()
        QgsMessageLog.logMessage('file_callback\t%s\t%s'%(senderName, filePath), "fire2gui", level = Qgis.Info)
        self.dlg.bar.pushMessage("file picker event", "choosen folder \t%s\t%s"%(senderName, filePath), level = Qgis.Info)

        # logica ui
        if senderName == 'mQgsFileWidget_InFolder':
            if os.path.isfile( os.path.join( filePath, 'elevation.asc')):
                self.dlg.mQgsFileWidget_elevation.setFilePath( os.path.join( filePath, 'elevation.asc'))
            if os.path.isfile( os.path.join( filePath, 'Ignitions.csv')):
                self.dlg.mQgsFileWidget_Ignitions.setFilePath( os.path.join( filePath, 'Ignitions.asc'))

    def getParams(self):
        #params[''] = self.dlg
        params = {}
        params['InFolder'] = self.dlg.mQgsFileWidget_InFolder.filePath()
        params['OutFolder'] = self.dlg.mQgsFileWidget_OutFolder.filePath()
        params['sim_years'] = 1
        params['nsims'] = self.dlg.mQgsSpinBox_nsims.value()
        params['seed'] = self.dlg.mQgsSpinBox_seed.value()
        params['nthreads'] = self.dlg.mQgsSpinBox_nthreads.value()
        params['max_fire_periods'] = self.dlg.mQgsSpinBox_max_fire_periods.value()
        params['IgRadius'] = self.dlg.mQgsSpinBox_IgRadius.value()
        params['gridsStep'] = 60
        params['gridsFreq'] = -1
        params['heuristic'] = -1
        params['messages_path'] = None
        params['GASelection'] = False
        params['HCells'] = None
        params['msgHeur'] = ''
        params['planPath'] = ''
        params['TFraction'] = 1.0
        params['GPTree'] = False
        params['valueFile'] = None
        params['noEvaluation'] = False
        params['ngen'] = 500
        params['npop'] = 100
        params['tSize'] = 3
        params['cxpb'] = 0.8
        params['mutpb'] = 0.2
        params['indpb'] = 0.5
        if self.dlg.radioButton_weather_rows.isChecked():
            params['WeatherOpt'] = 'rows'
            params['nweathers'] = 1
        elif self.dlg.radioButton_RandW.isChecked():
            params['WeatherOpt'] = 'random'
            params['nweathers'] = self.dlg.mQgsSpinBox_nweathers.value()
        params['spreadPlots'] = False
        params['finalGrid'] = False
        params['verbose'] = False
        if self.dlg.radioButton_IgPointFile.isChecked():
            params['ignitions'] = True
        else:
            params['ignitions'] = False
        params['grids'] = False
        params['plots'] = False
        params['allPlots'] = True #!
        params['combine'] = False
        params['no_output'] = False
        params['input_gendata'] = False
        params['OutMessages'] = False
        params['OutBehavior'] = False
        params['PromTuning'] = False
        params['input_trajectories'] = False
        params['stats'] = False
        params['Geotiffs'] = False
        params['tCorrected'] = False
        params['onlyProcessing'] = False
        params['BBO'] = False
        params['cros'] = False
        params['fdemand'] = False
        params['pdfOutputs'] = False
        params['input_PeriodLen'] = 60
        params['weather_period_len'] = 60
        params['ROS_Threshold'] = 0.1
        params['HFI_Threshold'] = 0.1
        params['ROS_CV'] = 0.0
        params['HFactor'] = 1.0
        params['FFactor'] = 1.0
        params['BFactor'] = 1.0
        params['EFactor'] = 1.0
        params['BurningLen'] = -1.0
        params['ROS10Factor'] = 3.34
        params['CCFFactor'] = 0.0
        params['CBDFactor'] = 0.0
        QgsMessageLog.logMessage('params\t%s'%(params), "fire2gui", level = Qgis.Info)
        self.dlg.textBrowser.setText('params\n%s'%(params))
        self.params = params
        return Namespace(**self.params)

    def runCell2Fire(self):
        pass
        '''
        task = Cell2FireTask( self.getParams(), 'waste cpu long')
        QgsApplication.taskManager().addTask(task)
        python main.py --input-instance-folder ../data/Sub40x40/ --output-folder ../../results/Sub40x40 --ignitions --sim-years 1 --nsims 5 --finalGrid --weather rows --nweathers 1 --Fire-Period-Length 1.0 --output-messages --ROS-CV 0.0 --seed 123 --stats --allPlots --IgnitionRad 5 --grids --combine
        '''

    def run(self):
        """Run method that performs all the real work"""

        # Get the project instance
        project = QgsProject.instance()
        projectDir = project.homePath()

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = FireClassDialog()
            #
            # message level : Info, Warning, Critical or Success
            # duration : 0=forever, -1=level default 
            self.dlg.bar = QgsMessageBar()
            self.dlg.layout().insertRow(0,self.dlg.bar) # at the end: .addRow . see qformlayout
            self.dlg.bar.pushMessage("I'm FireGui", "Hello World!", level = Qgis.Info, duration = 0)
            #
            # object.signal.connect(slot)
            # tabs 
            self.dlg.tabWidget.currentChanged.connect(self.tab_callback)
            ## folders
            #self.dlg.mQgsFileWidget.lineEdit().setValue('...Select the folder with instance files') 
            self.dlg.mQgsFileWidget_InFolder.setFilePath( projectDir)
            self.dlg.mQgsFileWidget_InFolder.fileChanged.connect( self.file_callback)
            self.dlg.mQgsFileWidget_OutFolder.setFilePath( projectDir)
            self.dlg.mQgsFileWidget_OutFolder.fileChanged.connect( self.file_callback)
            ## elevation
            if os.path.isfile( os.path.join( projectDir, 'elevation.asc')):
                self.dlg.mQgsFileWidget_elevation.setFilePath( os.path.join( projectDir, 'elevation.asc'))


        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()

        self.getParams()

        #task = Cell2FireTask(self.args,'Run!')
        #QgsApplication.taskManager().addTask(task)


        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
'''
    def pushButton_callback(self):
        #self.bar.pushMessage("accepted", "Hello World", level = Qgis.Info, duration = 3)
        QgsMessageLog.logMessage("pushButton_callback", 'fire2gui', level = Qgis.Info)

    def checkBox_callback(self):
        #self.bar.pushMessage("accepted", "Hello World", level = Qgis.Info, duration = 3)
        QgsMessageLog.logMessage("checkBox_callback"+str(self.dlg.checkBox.isChecked()), 'fire2gui', level = Qgis.Info)

    def radioButtonC1_callback(self):
        #self.bar.pushMessage("accepted", "Hello World", level = Qgis.Info, duration = 3)
        isC = self.dlg.radioButtonC1.isChecked()
        isE = self.dlg.radioButtonC1.isEnabled()
        pW = str(self.dlg.radioButtonC1.parentWidget())
        QgsMessageLog.logMessage("radioButton_callback \t checked %s \t enabled %s parent %s"%(isC,isE,pW), 'fire2gui', level = Qgis.Info)

    def radioButtonC2_callback(self):
        #self.bar.pushMessage("accepted", "Hello World", level = Qgis.Info, duration = 3)
        isC = self.dlg.radioButtonC2.isChecked()
        isE = self.dlg.radioButtonC2.isEnabled()
        pW = str(self.dlg.radioButtonC2.parentWidget())
        QgsMessageLog.logMessage("radioButton_callback \t checked %s \t enabled %s parent %s"%(isC,isE,pW), 'fire2gui', level = Qgis.Info)

    def radioButtonR_callback(self):
        #self.bar.pushMessage("accepted", "Hello World", level = Qgis.Info, duration = 3)
        isC = self.dlg.radioButtonR.isChecked()
        isE = self.dlg.radioButtonR.isEnabled()
        pW = str(self.dlg.radioButtonR.parentWidget())
        QgsMessageLog.logMessage("radioButton_callback \t checked %s \t enabled %s parent %s"%(isC,isE,pW), 'fire2gui', level = Qgis.Info)
            self.dlg.pushButton.clicked.connect(self.pushButton_callback)
            self.dlg.checkBox.stateChanged.connect(self.checkBox_callback)
            self.dlg.radioButtonR.toggled.connect(self.radioButtonR_callback)
            self.dlg.radioButtonC1.toggled.connect(self.radioButtonC1_callback)
            self.dlg.radioButtonC2.toggled.connect(self.radioButtonC2_callback)

'''
