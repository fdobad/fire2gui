# -*- coding: utf-8 -*-
#REPLENV: /home/fdo/pyenv/qgis
"""
/***************************************************************************
 fire2amClass
                                 A QGIS plugin
 Simulate a forest fires under different weather and fire model scenarios
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-02-07
        git sha              : $Format:%H$
        copyright            : (C) 2023 by fdobadvel (gui) & fire2a team
        email                : fire2a@fire2a.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QTimer, QProcess
from qgis.PyQt.QtWidgets import QAction, QDoubleSpinBox, QSpinBox
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.Qt import Qt
from qgis.core import QgsProject, Qgis, QgsWkbTypes, QgsMapLayerType, QgsFeatureRequest, QgsMessageLog, QgsVectorLayer, QgsRasterLayer, QgsField, QgsVectorFileWriter  #,QgsApplication, QgsTask 
from qgis.PyQt.QtCore import QVariant
import processing
from qgis.core import QgsFeature, QgsGeometry, QgsPointXY


# Initialize Qt resources from file resources.py
from .img.resources import *
# Import the code for the dialog
from .fire2am_dialog import fire2amClassDialog
from .fire2am_argparse import fire2amClassDialogArgparse
from .fire2am_utils import check, aName, log, get_params, randomDataFrame, csv2rasterInt16, mergeVectorLayers, cellIds2matchingLayer
from .qgis_utils import check_gdal_driver_name, matchPoints2Raster, matchRasterCellIds2points
from .ParseInputs2 import Parser2

from datetime import datetime, timedelta
from pandas import DataFrame, read_csv, Timestamp
from multiprocessing import cpu_count
from argparse import Namespace
from shutil import copy
from glob import glob
import numpy as np
import os.path
from shlex import split as shlex_split
import re

import pdb
from qgis.PyQt.QtCore import pyqtRemoveInputHook
# These lines allow you to set a breakpoint in the app
#pyqtRemoveInputHook()
#pdb.set_trace()
# This line enters into interactive
#(Pdb) !import code; code.interact(local=dict(globals(), **locals()))

# ?
#import warnings
#warnings.filterwarnings("ignore",message='Warning: QCoreApplication::exec: The event loop is already running')

class fire2amClass:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.
        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'fire2amClass_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Fire Simulator Analytics Management')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start_dialog = None
        self.first_start_argparse = None

        # argparse
        self.default_args, self.parser, self.groups = get_params(Parser2)
        self.gen_cmd = ''
        self.args = {}

        # global
        self.project = None
        self.layer = {}

        # QProcess
        self.proc_dir = os.path.join( self.plugin_dir, 'C2FSB')
        self.proc_exe = 'python3 main.py'
        self.proc = None
        self.name_state = { QProcess.ProcessState.NotRunning: 'Not running',
                            QProcess.ProcessState.Starting: 'Starting',
                            QProcess.ProcessState.Running: 'Running' }

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('fire2amClass', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/fire2am/img/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'%s: setup and run a forest fire simulation...'%aName),
            callback=self.run_Dialog,
            parent=self.iface.mainWindow())
        # dock start
        self.add_action(
            icon_path = ':/plugins/fire2am/img/icon_dev.png',
            text = self.tr(u'%s: all options (very experimental)'%aName),
            callback = self.run_Argparse,
            parent = self.iface.mainWindow(),
            add_to_toolbar = True)
        # dock end

        # will be set False in run()
        self.first_start_dialog = True
        self.first_start_argparse = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Fire Simulator Analytics Management'),
                action)
            self.iface.removeToolBarIcon(action)

    def run_Argparse(self):
        """Run method that performs all the real work"""
        if self.first_start_argparse == True:
            self.first_start_argparse = False
            self.argdlg = fire2amClassDialogArgparse()
        # show the dialog
        self.argdlg.show()
        # Run the dialog event loop
        result = self.argdlg.exec_()
        print('argdlg result',result)
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    def first_start_setup(self):
        ''' layers default names '''
        layers_byName = { l.name():l for l in QgsProject.instance().mapLayers().values()}
        for lname,layer in layers_byName.items():
            if re.match( 'model.*asc', lname) and layer.type() == QgsMapLayerType.RasterLayer:
                self.dlg.layerComboBox_fuels.setLayer(layer)
            elif re.match( 'mdt.*asc', lname) and layer.type() == QgsMapLayerType.RasterLayer:
                self.dlg.layerComboBox_elevation.setLayer(layer)
            elif re.match( 'cbh', lname) and layer.type() == QgsMapLayerType.RasterLayer:
                self.dlg.layerComboBox_cbh.setLayer(layer)
            elif re.match( 'cbd', lname) and layer.type() == QgsMapLayerType.RasterLayer:
                self.dlg.layerComboBox_cbd.setLayer(layer)
            elif re.match( 'ccf', lname) and layer.type() == QgsMapLayerType.RasterLayer:
                self.dlg.layerComboBox_fcc.setLayer(layer)
            elif re.match( 'fcc', lname) and layer.type() == QgsMapLayerType.RasterLayer:
                self.dlg.layerComboBox_fcc.setLayer(layer)
            elif re.match( '^py', lname) and layer.type() == QgsMapLayerType.RasterLayer:
                self.dlg.layerComboBox_ignitionProbMap.setLayer(layer)
                self.dlg.radioButton_ignitionProbMap.setChecked(True)
            elif re.match( '[Ee]levation', lname) and layer.type() == QgsMapLayerType.RasterLayer:
                self.dlg.layerComboBox_elevation.setLayer(layer)
            elif re.match( '[Ff]uel', lname) and layer.type() == QgsMapLayerType.RasterLayer:
                self.dlg.layerComboBox_fuels.setLayer(layer)
            elif re.match( '[Ii]gnition.*[Pp]rob', lname) and layer.type() == QgsMapLayerType.RasterLayer:
                self.dlg.layerComboBox_ignitionProbMap.setLayer(layer)
            elif re.match( '[Ii]gnition.*[Pp]oint', lname) and layer.type() == QgsMapLayerType.VectorLayer and layer.wkbType() == QgsWkbTypes.Point:
                self.dlg.layerComboBox_ignitionPoints.setLayer(layer)
        ''' weather file'''
        apath = self.project.absolutePath()
        wfile = os.path.join( apath, 'Weather.csv' )
        if os.path.isfile( wfile): 
            self.dlg.fileWidget_weatherFile.setFilePath( wfile)
            self.dlg.radioButton_weatherFile.setChecked(True)
        ''' weather folder '''
        wfolder = os.path.join( apath, 'Weathers' )
        if os.path.isdir( wfolder): 
            self.dlg.fileWidget_weatherFolder.setFilePath( wfolder)
            self.dlg.radioButton_weatherFolder.setChecked(True)
        #self.dlg.args['nweathers'] = 0
        ''' default values '''
        self.dlg.spinBox_nthreads.setValue( max(cpu_count() - 1, 1))
        self.dlg.spinBox_nthreads.setMaximum(cpu_count())

    def connect_slots(self):
        ''' main '''
        #self.dlg.tabWidget.currentChanged.connect(self.slot_tabWidget_currentChanged)
        self.dlg.pushButton_restoreDefaults.pressed.connect(self.slot_restoreDefaults)
        self.dlg.toolButton_dummyResults.pressed.connect(self.slot_dummyResults)
        self.dlg.toolButton_makeInstance.pressed.connect(self.makeInstanceIndep)
        self.dlg.toolButton_makeArgs.pressed.connect(self.makeArgsIndep)
        self.dlg.pushButton_run.pressed.connect(self.run_All)
        ''' tab landscape '''
        self.dlg.layerComboBox_fuels.layerChanged.connect( self.slot_trySelectRaster)
        self.dlg.layerComboBox_elevation.layerChanged.connect( self.slot_trySelectRaster)
        self.dlg.layerComboBox_cbh.layerChanged.connect( self.slot_trySelectRaster)
        self.dlg.layerComboBox_cbd.layerChanged.connect( self.slot_trySelectRaster)
        self.dlg.layerComboBox_fcc.layerChanged.connect( self.slot_trySelectRaster)
        ''' tab ignitions ''' 
        self.dlg.layerComboBox_ignitionPoints.layerChanged.connect(self.slot_layerComboBox_ignitionPoints_layerChanged)
        self.dlg.layerComboBox_ignitionProbMap.layerChanged.connect( self.slot_trySelectRaster)
        ''' tab weather '''
        self.dlg.fileWidget_weatherFile.fileChanged.connect( self.slot_fileWidget_weatherFile_fileChanged)
        self.dlg.fileWidget_weatherFolder.fileChanged.connect( self.slot_fileWidget_weatherFolder_fileChanged)
        self.dlg.pushButton_windRandomize.pressed.connect( self.slot_windRandomize)
        #self.dlg.radioButton_weatherFile.clicked.connect( self.slot_radioButton_weatherFile_clicked)
        #self.dlg.radioButton_weatherFolder.clicked.connect( self.slot_radioButton_weatherFolder_clicked)
        ''' tab run '''
        self.dlg.pushButton_dev.pressed.connect(self.externalProcess_start_dev)
        self.dlg.pushButton_run.pressed.connect(self.externalProcess_start)
        self.dlg.pushButton_kill.pressed.connect(self.externalProcess_kill)
        self.dlg.pushButton_terminate.pressed.connect(self.externalProcess_terminate)
        ''' tab tables '''
        ''' tab graphs '''
        #self.dlg.comboBox_plot.currentIndexChanged.connect( self.showPlot)
        self.dlg.comboBox_plot.currentIndexChanged.connect( lambda index: self.dlg.plt.show(index))

    def slot_windRandomize(self):
       WD = np.random.randint(0,359)
       WS = np.random.randint(1,100)
       self.dlg.spinBox_windDirection.setValue(WD)
       self.dlg.spinBox_windSpeed.setValue(WS)

    def showPlot(self, index):
        log('showing!!!', level=4)
        self.dlg.plt.show(index)

    def run_Dialog(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start_dialog == True:
            self.first_start_dialog  = False
            self.dlg = fire2amClassDialog()
            self.dlg.msgBar.pushMessage(aName+' Hello World!','Keep a project with layers open when interacting', duration=-1, level=Qgis.Info)
            self.project = QgsProject().instance()
            self.slot_windRandomize()
            self.dlg.tabWidget.setCurrentIndex(0)
            self.first_start_setup()
            self.connect_slots()

        if QgsProject.instance().mapLayers() == {}:
            self.iface.messageBar().pushCritical(aName+': No layers found', 'Open a project with layers and try again')
            log('Open a project with layers and restore defaults', pre='No layers found', level=3)
            return

        if self.project != QgsProject().instance():
            old = self.project
            self.project = QgsProject().instance()
            log( 'Old: %s %s New: %s %s'%( old.absoluteFilePath(), old.baseName(),
                                  self.project.absoluteFilePath(), self.project.baseName()), pre='Project Changed!', level=3, msgBar=self.dlg.msgBar)
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        print('result',result)
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    def makeInstance(self):
        '''mkdir directory, TODO from:copy&paste files to:write layers as new files
        '''
        if os.path.isdir( self.args['InFolder']):
            log( 'directory named %s, stopping!'%self.args['InFolder'], pre='Already Exists!', level=3, msgBar=self.dlg.msgBar)
            return
        os.mkdir( self.args['InFolder'])
        log( self.args['InFolder'],pre='Created directory',level=0, msgBar=self.dlg.msgBar)
        '''
        spain look up table'''
        copy( os.path.join( self.plugin_dir, 'spain_lookup_table.csv') , self.args['InFolder'])
        '''
        elevation '''
        copy( self.dlg.state['layerComboBox_elevation'].publicSource() , 
                os.path.join( self.args['InFolder'], 'elevation.asc'))
        log( 'elevation copied', level=0, msgBar=self.dlg.msgBar)
        '''
        fuels'''
        copy( self.dlg.state['layerComboBox_fuels'].publicSource() , 
                os.path.join( self.args['InFolder'], 'fuels.asc'))
        log( 'fuels copied',level=0, msgBar=self.dlg.msgBar)
        ''' 
        cbh cbd fcc'''
        for name in ['cbh', 'cbd', 'fcc']:
            layer = self.dlg.state['layerComboBox_'+name]
            if layer:
                if layer.type() == QgsMapLayerType.RasterLayer:
                    copy( self.dlg.state['layerComboBox_'+name].publicSource() , 
                        os.path.join( self.args['InFolder'], name+'.asc'))
                    log( name+' layer copied', level=0, msgBar=self.dlg.msgBar)
        '''
        weather'''
        if self.dlg.state['radioButton_weatherConstant']:
            ''' read dial and slider to generate Weather.csv '''
            nrows = self.dlg.state['spinBox_windConstLen']
            Instance = [ 'Jaime' ] *nrows
            FireScenario = [ 2 ] *nrows
            dt = [ self.now + timedelta(hours=i) for i in range(nrows)]
            WD = [ self.dlg.state['spinBox_windDirection'] ] * nrows
            WS = [ self.dlg.state['spinBox_windSpeed'] ] * nrows
            df = DataFrame( np.vstack((Instance,dt,WD,WS,FireScenario )).T, 
                    columns=['Instance','datetime','WD','WS', 'FireScenario'])
            df.to_csv( os.path.join( self.args['InFolder'],'Weather.csv'), header=True, index=False)
            log( 'speed:%s direction:%s'%(WS,WD), pre='Constant Wind', level=4, msgBar=self.dlg.msgBar)
        elif self.dlg.state['radioButton_weatherFile']:
            ''' copy weather file '''
            copy( self.dlg.state['fileWidget_weatherFile'], os.path.join( self.args['InFolder'], 'Weather.csv'))
            log( 'weather file copied', level=0, msgBar=self.dlg.msgBar)
        elif self.dlg.state['radioButton_weatherFolder']:
            ''' copy weather folder '''
            dst = os.path.join( self.args['InFolder'],'Weathers')
            os.mkdir(dst)
            for filename in glob( self.dlg.state['fileWidget_weatherFolder']+os.sep+'Weather[0-9]*.csv'):
                copy( filename, dst)
            log( 'weather folder copied', level=0, msgBar=self.dlg.msgBar)
        ''' 
        ignitions '''
        if self.dlg.state['radioButton_ignitionPoints']:
            ''' match layer points to raster layer coords, write Ignitions.csv with cell id '''
            points = self.dlg.state['layerComboBox_ignitionPoints']
            raster = self.dlg.state['layerComboBox_fuels']
            ''' match '''
            cellIds, _, _ = matchPoints2Raster( raster, points)
            Ncell = [ c+1 for c in cellIds ]
            if not Ncell:
                log( 'for %s into fuel raster (check crs)'%points.name(), pre='No matching point', level=3, msgBar=self.dlg.msgBar)
                return
            data = { 'Year':None, 'Ncell': Ncell }
            df = DataFrame.from_dict( data)
            df.fillna(1, inplace=True)
            df.to_csv( os.path.join( self.args['InFolder'],'Ignitions.csv'), header=True, index=False)
            log( 'written', pre='Ignition points', level=0, msgBar=self.dlg.msgBar)

        elif self.dlg.state['radioButton_ignitionProbMap']:
            ipm_layer = self.dlg.state['layerComboBox_ignitionProbMap']
            copy( ipm_layer.publicSource() , os.path.join(self.args['InFolder'],'py.asc'))
            log( 'ignitionProbMap copied', level=0, msgBar=self.dlg.msgBar)

    def slot_trySelectRaster(self, layer):
        try:
            if not layer:
                return
            name = self.dlg.sender().objectName()
            if not layer.type() == QgsMapLayerType.RasterLayer:
                log( '%s selected layer %s'%(name,layer.name()), pre='Not Raster!', level=2, msgBar=self.dlg.msgBar)
                return
            ret, val = check_gdal_driver_name( layer, driver_name='AAIGrid')
            if not ret:
                log( '%s selected layer %s has %s driver. Translate to AAIGrid!'%(name,layer.name(),val), pre='Not AAIGrid', level=2, msgBar=self.dlg.msgBar)
                return
            log( '%s selected layer %s'%(name,layer.name()), pre='Is AAIGrid raster!' , level=4, msgBar=self.dlg.msgBar)
        except Exception as e:
            log(e, pre='%s selected layer %s Exception'%(name,layer.name()), level=3, msgBar=self.dlg.msgBar)

    def slot_layerComboBox_ignitionPoints_layerChanged(self, layer):
        def warn_reject(msg):
            self.dlg.radioButton_ignitionRandom.setChecked(True)
            log( 'layer '+layer.name(), pre=msg, level=2,msgBar=self.dlg.msgBar)
        try:
            if not layer:
                return
            if not layer.type() == QgsMapLayerType.VectorLayer:
                warn_reject('Not vector!')
                return
            if not layer.wkbType() == QgsWkbTypes.Point:
                warn_reject('Not with Points!')
                return
            pts = [ f.geometry() for f in layer.getFeatures() \
                    if check( f, 'geometry') and \
                       f.geometry().wkbType() == QgsWkbTypes.Point]
            self.dlg.args['num_ignitions'] = pts
            if len(pts) == 0:
                warn_reject('0 points found!')
                return
            log( 'Read from %s layer'%layer.name(), pre='%s points'%len(pts), level=4, msgBar=self.dlg.msgBar)
            self.dlg.radioButton_ignitionPoints.setChecked(True)
        except Exception as e:
            log( e, pre='Ignition Point layer exception!', level=2, msgBar=self.dlg.msgBar)

    def slot_fileWidget_weatherFolder_fileChanged(self, directory):
        def restore():
            self.dlg.fileWidget_weatherFolder.blockSignals(True)
            self.dlg.fileWidget_weatherFolder.setFilePath( self.project.absolutePath())
            self.dlg.fileWidget_weatherFolder.blockSignals(False)
            self.dlg.radioButton_weatherConstant.setChecked(True)
            self.dlg.args['nweathers'] = 0
        try:
            ''' count sequential Weather files '''
            i=1
            while os.path.isfile( os.path.join( directory, 'Weather'+str(i)+'.csv')):
                i+=1
            i-=1
            if i==0: 
                ''' restore '''
                log( 'Weather files must be a consecutive numbered sequence [1..N]', pre='No Weather[1..N].csv files', level=2, msgBar=self.dlg.msgBar)
                restore()
                return
            log(  'Found in %s'%directory, pre='Weathers[1..%s].csv'%i, level=4, msgBar=self.dlg.msgBar)
            self.dlg.radioButton_weatherFolder.setChecked(True)
            self.dlg.state['radioButton_weatherFolder'] = True
            self.dlg.state['fileWidget_weatherFolder'] = directory
            self.dlg.args['nweathers'] = i
        except Exception as e:
            log( e, pre='Weather Folder %s exception'%directory, level=2, msgBar=self.dlg.msgBar)
            restore()

    def slot_fileWidget_weatherFile_fileChanged(self, filepath):
        def restore():
            self.dlg.fileWidget_weatherFile.blockSignals(True)
            self.dlg.fileWidget_weatherFile.setFilePath( self.project.absolutePath())
            self.dlg.fileWidget_weatherFile.blockSignals(False)
            self.dlg.radioButton_weatherConstant.setChecked(True)
        try:
            df = read_csv( filepath)
            if 'WS' not in df.columns or 'WD' not in df.columns or len(df)==0:
                log(  os.path.basename(filepath)+' file does not contain them', pre='Missing WD or WS columns!', level=2, msgBar=self.dlg.msgBar)
                restore()
                return
            log( 'has WD & WS columns, %s hours (rows)'%len(df), pre=os.path.basename(filepath), level=4, msgBar=self.dlg.msgBar)
            self.dlg.radioButton_weatherFile.setChecked(True)
            self.dlg.state['radioButton_weatherFile'] = True
            self.dlg.state['fileWidget_weatherFile'] = filepath
        except Exception as e:
            log( e, pre='Single .csv file %s exception'%filepath, level=2, msgBar=self.dlg.msgBar)
            restore()

    def makeInstanceIndep(self):
        self.now = datetime.now()
        self.dlg.updateState()
        self.makeArgs()
        self.makeInstance()

    def makeArgsIndep(self):
        self.now = datetime.now()
        self.dlg.updateState()
        self.makeArgs()

    def makeArgs(self):
        ''' from self.default_args.copy()
            update dlg values from spinboxes
            update tab logic
                weathers
                ignitions
            update argparse dialog gen_cmd (only true clicked boxes)
            SET InFolder = Instance+now
        '''
        args = {}
        gen_cmd = ''
        log( 'makeArgs 0 base',args, level=0)

        '''
        Get values for all Double|SpinBox dlg components'''
        args.update( { o.objectName()[o.objectName().index('_')+1:]: o.value() 
            for o in self.dlg.findChildren( (QDoubleSpinBox, QSpinBox), 
                                        options= Qt.FindChildrenRecursively)})
        ''' these are used on weather file generation on makeInstance '''
        args.pop('windDirection')
        args.pop('windSpeed')
        args.pop('windConstLen')
        if args['ROS_CV'] == 0.0:
            args.pop('ROS_CV')
        if not self.dlg.state['radioButton_ignitionPoints']:
            args.pop('IgRadius')
        if args['fmc'] == 100:
            args.pop('fmc')
        if args['scenario'] == 3:
            args.pop('scenario')
        #args.pop('')
        log( 'makeArgs 1 spinboxes',args, level=0)

        ''' weather logic '''
        if self.dlg.state['radioButton_weatherFolder']:
            args['WeatherOpt'] = 'random'
        elif self.dlg.state['radioButton_weatherFile'] or \
             self.dlg.state['radioButton_weatherConstant']:
             args['WeatherOpt'] = 'rows'

        ''' ignition logic '''
        if self.dlg.state['radioButton_ignitionPoints']:
            args['ignitions'] = True

        ''' nsims logic '''
        if self.dlg.state['spinBox_nsims']==1:
            args['nsims'] = 1
            args['grids'] = True
        else:
            args['nsims'] = self.dlg.state['spinBox_nsims']
            args['finalGrid'] = True

        ''' add tiffs '''
        # TODO
        #args['Geotiffs'] = True

        log( 'makeArgs 2 +logic',args, level=0)

        ''' update argparse dialog
        dialog did ever open? '''
        self.now_str = self.now.strftime('%y-%m-%d_%H-%M-%S')
        if self.first_start_argparse:
            ''' never opened '''
            args['InFolder'] = os.path.join( self.project.absolutePath(), 'Instance'+self.now_str) + os.path.sep
            args['OutFolder'] = os.path.join( args['InFolder'], 'results')
        else:
            ''' did opened '''
            args.update(self.argdlg.gen_args)
            ''' but didnt mention ioFolder '''
            if 'InFolder' not in self.argdlg.gen_args.keys():
                args['InFolder'] = os.path.join( self.project.absolutePath(), 'Instance'+self.now_str) + os.path.sep
            if 'OutFolder' not in self.argdlg.gen_args.keys():
                args['OutFolder'] = os.path.join( args['InFolder'], 'results')
            self.proc_dir = self.argdlg.fileWidget_directory.filePath()
            self.proc_exe = self.argdlg.header
            
        for key,val in args.items():
            if key in self.parser.keys():
                if self.parser[key]['type'] is None:
                    gen_cmd += self.parser[key]['option_strings'][0] + ' '
                else:
                    gen_cmd += self.parser[key]['option_strings'][0] + ' ' + str(args[key]) + ' '

        self.args = args
        self.gen_cmd = gen_cmd 
        log( 'makeArgs 2 argparse', self.args, level=0)
        log( 'makeArgs 3 generated command', self.gen_cmd, level=0)

    def slot_restoreDefaults(self):
        if not self.first_start_dialog:
            self.first_start_dialog = True
            self.dlg.destroy()
        if not self.first_start_argparse:
            self.first_start_argparse= True
            self.argdlg.destroy()

    def run_All(self):
        self.now = datetime.now()
        self.dlg.updateState()
        self.makeArgs()
        self.makeInstance()
        self.externalProcess_start()

    def externalProcess_message(self, s):
        self.dlg.plainTextEdit.appendPlainText(s)

    def externalProcess_kill(self):
        if self.proc:
            self.externalProcess_message('Killing run process with state: '+self.name_state[self.proc.state()])
            self.proc.kill()
            return
        log('Nothing to kill', pre='Run process', level=1, msgBar=self.dlg.msgBar)

    def externalProcess_terminate(self):
        if self.proc:
            self.externalProcess_message('Terminating run process with state: '+self.name_state[self.proc.state()])
            self.proc.terminate()
            return
        log('Nothing to terminate', pre='Run process', level=1, msgBar=self.dlg.msgBar)

    def externalProcess_start(self):
        if self.proc is None:
            self.externalProcess_message('Starting run process '+self.gen_cmd)
            log('Starting run process '+self.gen_cmd,level=0)

            self.proc = QProcess()
            self.proc.setInputChannelMode(QProcess.ForwardedInputChannel)
            self.proc.setProcessChannelMode( QProcess.SeparateChannels)
            self.proc.readyReadStandardOutput.connect(self.externalProcess_handle_stdout)
            self.proc.readyReadStandardError.connect(self.externalProcess_handle_stderr)
            self.proc.stateChanged.connect(self.externalProcess_handle_state)
            self.proc.finished.connect(self.externalProcess_finished)  # Clean up once complete.
            self.proc.setWorkingDirectory( self.proc_dir)
            self.externalProcess_message('workdir %s'%self.proc_dir)
            ar = shlex_split( self.proc_exe +' '+ self.gen_cmd  )
            self.externalProcess_message('args %s'%ar)
            log( 'ar', *ar, level=0)
            self.proc.start( ar[0], ar[1:] )
            self.externalProcess_message('Started')
            log('Started',level=0)
            '''basic
            self.proc.setWorkingDirectory( os.path.join( self.plugin_dir, 'extras'))
            self.proc.start("python3", ['dummy_proc.py'])
            '''

    def externalProcess_start_dev(self):
        if self.first_start_argparse:
            log('dev dialog has never been opened (not created)', pre="Can't run dev mode", level=2)
            return
        if self.proc:
            log('Process is running', pre="Can't run dev mode", level=2)
            return
        self.proc = QProcess()
        self.proc.setInputChannelMode( QProcess.ForwardedInputChannel)
        self.proc.setProcessChannelMode( QProcess.SeparateChannels)
        self.proc.readyReadStandardOutput.connect( self.externalProcess_handle_stdout)
        self.proc.readyReadStandardError.connect( self.externalProcess_handle_stderr)
        self.proc.stateChanged.connect( self.externalProcess_handle_state)
        self.proc.finished.connect( self.externalProcess_finished)
        #self.makeArgs()
        header, arg_str, _, workdir = self.argdlg.get()
        log('Starting DEV run'+self.gen_cmd,level=0)
        self.proc.setWorkingDirectory( workdir)
        ar = shlex_split( header + ' ' + arg_str )
        self.proc.start( ar[0], ar[1:] )
        self.externalProcess_message('Started DEV run:\n\t%s\n\t%s'%(workdir,ar))

    def externalProcess_handle_stderr(self):
        data = self.proc.readAllStandardError()
        stderr = bytes(data).decode("utf8")
        self.externalProcess_message('!@#$%^&* stdError stream:\n'+stderr)

    def externalProcess_handle_stdout(self):
        data = self.proc.readAllStandardOutput()
        stdout = bytes(data).decode("utf8")
        self.externalProcess_message(stdout)

    def externalProcess_handle_state(self, state):
        self.externalProcess_message('State changed: '+self.name_state[state])

    def externalProcess_finished(self):
        self.externalProcess_message("Process finished.")
        self.proc = None

        if not os.path.isdir( self.args['OutFolder'] ):
            log('results folder',self.args['OutFolder'], pre='Does NOT exist', msgBar=self.dlg.msgBar, level=3)
            return
        logfile = os.path.join(self.args['OutFolder'], 'LogFile.txt')
        if os.path.isfile( logfile):
            log('Loading results now...', pre='Success!', level=4, msgBar=self.dlg.msgBar)
            self.loadResults()
        else:
            log('LogFile.txt not available', pre='No Results', level=3, msgBar=self.dlg.msgBar)


    def loadResults(self):
        ''' 
        LogFile.txt 
            generate ignition point(s) layer
        re|create output layer group
        if nsim = 1 : isochrones
        else : heatmap
        save new project into new instance folder
        '''

        ''' print LogFile.txt '''
        logfile = os.path.join(self.args['OutFolder'], 'LogFile.txt')
        with open(logfile, 'rb', buffering=0) as afile:
            text = afile.read().decode()
            self.externalProcess_message( text)

        '''add output layer groups MOVING LAYERS AND ADDING TO GROUPS IS BUGGY 
            outputGroupName='OUTPUT_'+os.path.basename(os.path.normpath(self.args['OutFolder']))
            root = QgsProject.instance().layerTreeRoot()
            outputGroup = root.addGroup(outputGroupName)
            fireEvGroup = outputGroup.addGroup('Fire Evolution')
            gridGroup = fireEvGroup.addGroup('Grids')
            polyGroup = fireEvGroup.addGroup('Polygons')
             TODO handle removing older/other output groups
            group = root.findGroup(groupName)
            if not group:
                group = root.addGroup(groupName)
        '''
        grid_directory = os.path.join( self.args['OutFolder'], 'Grids')
        if not os.path.isdir( grid_directory):
            log('Grids folder in results folder', grid_directory,  pre='Does NOT exist', msgBar=self.dlg.msgBar, level=3)
            return

        if self.args['nsims']==1:
            self.load1sim()
        else:
            self.loadsims()

        geo_package_file=os.path.join(self.args['OutFolder'], 'outputs.gpkg')
        ''' make ignition points layer 
            based on fuels raster
        '''
        ignitionPointsIds = re.findall( 'ignition point for Year [0-9]*, sim [0-9]*: ([0-9]+)', text)
        ignitionPointsIds = [ int(cell)-1 for cell in ignitionPointsIds ] 
        feats = []
        for x,y in matchRasterCellIds2points( ignitionPointsIds, self.dlg.state['layerComboBox_fuels']):
            f = QgsFeature()
            f.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(x,y)))
            feats += [ f]

        layerName = 'after ignition points'
        vectorLayer = QgsVectorLayer( 'point', layerName, 'memory')
        ret, val = vectorLayer.dataProvider().addFeatures(feats)
        log( ret, val, layerName, pre = 'vectorLayer data provider add features', level=0)

        options = QgsVectorFileWriter.SaveVectorOptions()
        options.driverName = 'GPKG'
        options.layerName = layerName
        if os.path.exists(geo_package_file):
            options.actionOnExistingFile = QgsVectorFileWriter.CreateOrOverwriteLayer
        else:
            options.actionOnExistingFile = QgsVectorFileWriter.CreateOrOverwriteFile
        ret, val = QgsVectorFileWriter.writeAsVectorFormat( vectorLayer , geo_package_file, options)
        log( ret, val, layerName, pre = 'vectorLayer writeAsVectorFormat', level=1)

        # show menu to select layers to add
        self.iface.addVectorLayer( geo_package_file, layerName, 'ogr')

    def loadsims(self):
        geo_package_file=os.path.join(self.args['OutFolder'], 'outputs.gpkg')

        fl = sorted(glob( self.args['OutFolder']+os.sep+'Grids'+os.sep+'Grids[0-9]*'+os.sep+'*csv'), key=os.path.getmtime)
        indexes = re.findall( 'Grids([0-9]+)', ' '.join(fl))

        rasterOk = []
        for f,i in zip(fl,indexes):
            layerName = 'raster_FireScar'+i
            ret, val = csv2rasterInt16( extent = self.dlg.state['layerComboBox_elevation'].extent(),
                             layerName = layerName,
                             filepath = f,
                             crs = self.project.crs(),
                             outpath = geo_package_file)
            #if ret:
            #    self.iface.addRasterLayer( 'GPKG:'+geo_package_file+':'+layerName, layerName)
            rasterOk += [ret]

        options = QgsVectorFileWriter.SaveVectorOptions()
        options.driverName = 'GPKG'
        for j,i in enumerate(indexes):
            if rasterOk[j]:
                rasterLayer = QgsRasterLayer('GPKG:'+geo_package_file+':'+'raster_FireScar'+i, 'raster_FireScar'+i)
                tmp = processing.run('gdal:polygonize',{ 'BAND' : 1, 'EIGHT_CONNECTEDNESS' : False, 'EXTRA' : '', 'FIELD' : 'DN', 'INPUT' : rasterLayer, 'OUTPUT' : 'TEMPORARY_OUTPUT' })
                vectorLayer = QgsVectorLayer( tmp['OUTPUT'], 'polygon_Fire'+i )
                vectorLayer.setCrs( self.project.crs())
                options.layerName = 'polygon_FireScar'+i
                if os.path.exists(geo_package_file):
                    options.actionOnExistingFile = QgsVectorFileWriter.CreateOrOverwriteLayer
                else:
                    options.actionOnExistingFile = QgsVectorFileWriter.CreateOrOverwriteFile
                QgsVectorFileWriter.writeAsVectorFormat( vectorLayer, geo_package_file, options)

        layerList = [ geo_package_file+'|layername=polygon_FireScar'+i for j,i in enumerate(indexes) if rasterOk[j] ]
        ogrDB = geo_package_file
        tableName = 'merged_Fire_Scars'
        tmp = mergeVectorLayers( layerList, ogrDB, tableName)
        #if tmp:
        #    self.iface.addVectorLayer( geo_package_file+'|layername='+tableName , tableName, 'ogr')
        log('FIN', level=0)

    def load1sim(self):
        grid_directory = os.path.join( self.args['OutFolder'], 'Grids')
        grid_directory = os.path.join( grid_directory, 'Grids1')
        if not os.path.isdir( grid_directory):
            log('Grids1 folder in results folder', grid_directory, pre='Does NOT exist', msgBar=self.dlg.msgBar, level=3)
            return

        grid_list = sorted(glob( grid_directory + os.sep + 'ForestGrid[0-9]*.csv'), key=os.path.getmtime)
        if not grid_list:
            log('ForestGrid[0-9]*.csv in results folder', grid_directory, pre='Do NOT exist', msgBar=self.dlg.msgBar, level=3)
            return

        #geo_package_file= '/home/fdo/source/C2FSB/data/Vilopriu_2013/result/FireEvoRasters.gpkg'
        geo_package_file=os.path.join(self.args['OutFolder'], 'outputs.gpkg')
        rasterOk = []
        for csvGrid in grid_list:
            layerName = 'raster_FireEvolution_'+os.path.basename( csvGrid)[:-4]
            ret, val = csv2rasterInt16( extent = self.dlg.state['layerComboBox_elevation'].extent(),
                             layerName = layerName,
                             filepath = csvGrid,
                             crs = self.project.crs(),
                             outpath = geo_package_file)
            #if ret:
            #    self.iface.addRasterLayer( 'GPKG:'+geo_package_file+':'+layerName, layerName)
            rasterOk += [ret]

        log('rasters written', rasterOk, level=0)
        #outpath = '/home/fdo/source/C2FSB/data/Vilopriu_2013/result/polygons.gpkg'
        #outpath = os.path.join(self.args['OutFolder'], 'outputPolygons.gpkg')

        weather_file = os.path.join( self.args['InFolder'], 'Weather.csv')
        if not os.path.isfile( weather_file):
            log('Weather.csv in input instance folder', pre='Does NOT exist', msgBar=self.dlg.msgBar, level=3)
            return
        df = read_csv( weather_file)
        #df = read_csv( 'Weather.csv')

        options = QgsVectorFileWriter.SaveVectorOptions()
        options.driverName = 'GPKG'
        #geo_package_file= '/home/fdo/source/C2FSB/data/Vilopriu_2013/result/polygons.gpkg'
        for i,csvGrid in enumerate( grid_list):
            if not rasterOk[i]:
                continue
            # TODO i-1 -> check index exists
            dt = Timestamp(df.datetime.iloc[i-1]).strftime('%Y-%m-%d %I:%H:%M')
            layerName = os.path.basename( csvGrid)[:-4]
            rasterLayer = QgsRasterLayer('GPKG:'+geo_package_file+':'+'raster_FireEvolution_'+layerName, 'raster_FireEvolution_'+layerName)
            tmp = processing.run('gdal:polygonize',{ 'BAND' : 1, 'EIGHT_CONNECTEDNESS' : False, 'EXTRA' : '', 'FIELD' : 'DN', 'INPUT' : rasterLayer, 'OUTPUT' : 'TEMPORARY_OUTPUT' })
            vectorLayer = QgsVectorLayer( tmp['OUTPUT'], 'polygon_'+layerName )
            if not vectorLayer.isEditable():
                vectorLayer.startEditing()
            vectorLayer.dataProvider().addAttributes([QgsField('datetime',QVariant.DateTime)])
            vectorLayer.updateFields()
            id_dt = vectorLayer.fields().indexFromName('datetime')
            for feature in vectorLayer.getFeatures():
                attr = { id_dt : dt}
                vectorLayer.dataProvider().changeAttributeValues({ feature.id() : attr})
            vectorLayer.commitChanges()
            options.layerName = 'polygon_FireEvolution_'+layerName
            if os.path.exists(geo_package_file):
                options.actionOnExistingFile = QgsVectorFileWriter.CreateOrOverwriteLayer
            else:
                options.actionOnExistingFile = QgsVectorFileWriter.CreateOrOverwriteFile
            QgsVectorFileWriter.writeAsVectorFormat( vectorLayer, geo_package_file, options)

        ''' merge polygons
            ['/home/fdo/source/C2FSB/data/Vilopriu_2013/result/FireEvolution.gpkg|layername=polygon_ForestGrid01','/home/fdo/source/C2FSB/data/Vilopriu_2013/result/FireEvolution.gpkg|layername=polygon_ForestGrid02','/home/fdo/source/C2FSB/data/Vilopriu_2013/result/FireEvolution.gpkg|layername=polygon_ForestGrid03','/home/fdo/source/C2FSB/data/Vilopriu_2013/result/FireEvolution.gpkg|layername=polygon_ForestGrid04','/home/fdo/source/C2FSB/data/Vilopriu_2013/result/FireEvolution.gpkg|layername=polygon_ForestGrid05','/home/fdo/source/C2FSB/data/Vilopriu_2013/result/FireEvolution.gpkg|layername=polygon_ForestGrid06','/home/fdo/source/C2FSB/data/Vilopriu_2013/result/FireEvolution.gpkg|layername=polygon_ForestGrid07']
            'OUTPUT' : 'ogr:dbname=\'/home/fdo/source/C2FSB/data/Vilopriu_2013/result/FireEvolution.gpkg\' table=\"merged_polygons\" (geom) sql='
        '''
        layerList = [ geo_package_file+'|layername=polygon_FireEvolution_'+os.path.basename( csvGrid)[:-4] for i,csvGrid in enumerate( grid_list) if rasterOk[i] ]
        print('layerList', layerList)
        log('layerList', layerList, level=1)
        ogrDB = geo_package_file
        tableName = 'merged_polygons'
        tmp = mergeVectorLayers( layerList, ogrDB, tableName)
        if tmp:
            self.iface.addVectorLayer( geo_package_file+'|layername='+tableName , 'Single Fire Evolution' , 'ogr')
            # TODO select by loading it from geo_package
            polyLayer = QgsProject.instance().mapLayersByName( 'Single Fire Evolution '+tableName )[0] 
            polyLayer.loadNamedStyle(os.path.join( self.plugin_dir, 'img/mergedPolygons_layerStyle.qml'))
            #polyLayer = QgsVectorLayer( tmp['OUTPUT'], 'Single Fire Evolution')
        log('FIN', level=0)

    def slot_dummyResults(self):
        self.loadResults()

        # data
        self.dlg.tableView_1.setModel(self.dlg.PandasModel(randomDataFrame(12,6,int)))
        self.dlg.tableView_2.setModel(self.dlg.PandasModel(randomDataFrame(12,3,float)))

        # plot
        canvas0 = self.dlg.plt.new()
        ax0 = canvas0.figure.subplots()
        title='Static -- About as simple as it gets, folks'
        ax0.set(xlabel='time (s)', ylabel='voltage (mV)', title=title)
        t = np.linspace(0, 10, 50)
        ax0.plot(t, np.tan(t)/t, ".")
        self.dlg.comboBox_plot.addItem(title)

        # plot
        canvas1 = self.dlg.plt.new()
        ax1 = canvas1.figure.subplots()
        title='2 Static -- About as simple as it gets, folks'
        ax1.set(xlabel='time (s)', ylabel='voltage (mV)', title=title)
        t = np.linspace(0, 10, 50)
        ax1.plot(t, np.tan(t)/t, ".")
        self.dlg.comboBox_plot.addItem(title)

        self.dlg.plt.show(0)
        self.dlg.plt.show(1)
        self.dlg.plt.show(0)
        '''
        pyqtRemoveInputHook()
        pdb.set_trace()
        #(Pdb) !import code; code.interact(local=dict(globals(), **locals()))
        '''

